package main

import (
	"fmt"
	"strings"
)

func bracketCheck(teks string) bool {
	//checking bracket value
	var brackets []string
	for _, val := range teks {
		x := fmt.Sprintf("%c", val)
		if x == "(" || x == "[" || x == "{" {
			brackets = append(brackets, x)
		}
		if x == ")" || x == "]" || x == "}" {
			brackets = append(brackets, x)
		}
	}

	//zero value handling
	if len(brackets) == 0 {
		return false
	}

	//counting the brackets
	mapper := make(map[string]int)
	for _, value := range brackets {
		_, ok := mapper[value]
		if !ok {
			mapper[value] = 1
		} else {
			mapper[value]++
		}

	}

	//bracket frequency comparison
	if mapper["("] != mapper[")"] {
		return false
	}
	if mapper["{"] != mapper["}"] {
		return false
	}
	if mapper["["] != mapper["]"] {
		return false
	}
	return true
}

func reoccurenceCheck(array []string) string {
	arr1 := strings.Split(array[0], ", ")
	arr2 := strings.Split(array[1], ", ")
	var arr3 []string
	for _, val := range arr1 {
		for _, str := range arr2 {
			if val == str {
				arr3 = append(arr3, val)
			}
		}
	}
	if len(arr3) == 0 {
		return "false"
	}
	result := strings.Join(arr3, ", ")

	return result

}
func main() {
	fmt.Println("Nomor 1")
	fmt.Println(bracketCheck("(hello (world))"))                 //true
	fmt.Println(bracketCheck("{}}"))                             //false
	fmt.Println(bracketCheck("{}({}"))                           //false
	fmt.Println(bracketCheck("(hello {world}) [(test) {case}]")) //true
	fmt.Println(bracketCheck("(hello {world)"))                  //false
	fmt.Println("Nomor 2")
	fmt.Println(reoccurenceCheck([]string{"1, 3, 4, 7, 13", "1, 2, 4, 13, 15"}))
	fmt.Println(reoccurenceCheck([]string{"1, 3, 4, 7, 13", "2, 5, 11, 15"}))

}
